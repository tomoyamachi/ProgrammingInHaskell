* 第1章
** 1_1 関数
    関数は「一つ以上の引数を取り、一つの結果を返す変換」できる。
    関数を適用する順番は、結果に影響を与えない!
** 1_2 関数プログラミング
    関数プログラミングは「計算とは関数を引数に適用することだ」という視点(*)
    命令型言語は「計算の基本は蓄えられている値を変えること」という視点(*)
    *用語の定義は人によって違う。

*** (命令 in ruby)
:      def get_total(n)
:        count = 0#命令してる
:        total = 0#命令してる
:        while count < n
:          count += 1
:          total += count
:          #totalとcountの値が変化しているのがわかる。
:        end
:        total
:      end
    命令型言語は関数プログラミングを制限しているものが多い。
    Haskellは関数の利用に制約はない。

*** (関数 in rubyだとこうなんのか??injectは制約ない気がする)
:      def get_total(n)
:        total = (0..n).inject(0){|count,i| count + i}
:      end

** 1_3 Haskellの特徴
-    簡潔なプログラム
        少ないキーワード
        インデントによる構造化
-    強力な型システム(ch.3)
        型推論+「多相型」「多重定義型」
-    リスト内包表記(ch.5)
        一つ以上のリストから要素を選択、加工することで、新しいリストをつくる。
-    再帰関数(ch.6)
        自分をつかって自分を定義
-    高階関数(ch.7)
        引数として関数を取る。||返り値として関数を返す。
-    モナド(ch.8-10)
-    遅延評価(ch.12)
-    プログラムの論証(ch.13)
** 1_5 Haskellの妙味
    クイックソート
:      qsort[] = []
:      qsort(x:xs) = qsort smaller ++ [x] ++ qsort larger
:        where
:          smaller = [a|a<-xs,a<=x]
:          larger = [b|b<-xs,b>x]

    qsortの型は「qsort::Ord a => [a] -> [a]」。
    Ordとは、Ordering型(任意の順序型)。

* 第2章 はじめの一歩
2_1 Hugs
** 2_2 標準ライブラリ
    Prelude.hsという標準ライブラリを起動時に読みこむ。

    演算子
:        +
:        -
:        *
:        ^
:        `div`
    リスト操作
:        head
:        tail
:        [1,2,3]!!n
:        take n [1,2,3]
:        drop n [1,2,3]
:        length
:        sum
:        product
:        ++
:        reverse
** 2_3 関数適用(ひむらさんのをコピペ)
     | 数学       | haskell(ghc?) | 別解           |
     |------------+---------------+---------------|
     |------------+---------------+---------------|
     | f(x)       | f x           |               |
     |------------+---------------+---------------|
     | f(x,y)     | f x y         |               |
     |------------+---------------+---------------|
     | f(g(x))    | f (g x)       | f $ g x       |
     |------------+---------------+---------------|
     | f(x, g(x)) | f x (g x)     | f x $ g x     |
     |------------+---------------+---------------|
     | f(x)g(x)   | f x * g x     | (f x) * (g x) |
** 2_4 Haskellプログラム
    ghci(hugs)でのコマンド
:        :l filename => load filename
:        :r => reload current file
:        :t expr => show expr's type
:        :? => help
    レイアウト規則 - 行頭揃えによって定義をグループ化できる
    コメント
:  -- 一行コメント
: {- 囲みコメント
:       -}

* 第3章 型とクラス
** 3_1 基本概念
    型とは、互いに関連する値の集合。
    v::Tは「vの型はTである」という意味。
    Haskellでは、「すべての式は型を持たなければならない」!!
    式の型は、型推論によって、式を評価する前に決まる。
** 3_2 基本型
    Bool ー 真理値
    Char ー 文字。シングルクオートで囲む。制御文字を値として持つ。
    String ー 文字列。ダブルクオート。
    Int ー 固定精度整数。 -2^31 <= Int <= (2^31 -1)
    Integer ー 多倍長整数。
    Float ー 単精度浮動小数点数。
** 3_3 リスト型
    リストとは「同じ型の要素の並び」。
    表記は、[]で囲まれ、コンマで区切る。
    T型の要素をもつリストの型は、[T]と書く。
** 3_4 タプル型
    タプルとは「有限個の要素の組」。各要素の型が異なってもよい。
    表記は、()で囲まれ、コンマで区切る。
3_5 関数型
** 3_6 カリー化された関数
    関数は「ある型の引数を他の型の結果に変換する」!!
    型T1の引数を、型T2に変換すると、「T1 -> T2」
    複数の引数を取ろうと思ったら、
    タプルを引数にする。
    (ex)
:        add ::(Int,Int) -> Int
:        add (x,y) = x + y
    関数をカリー化する。
    (ex)
:        add' ::Int -> Int -> Int
:        add' x y = x + y
:        -- ::Int -> Int -> Int は ::Int -> (Int -> Int)を表す。
** 3_7 多相型
    たとえばlengthは、リスト内の型がなんであろうと、Intを出力する。このとき
:    length::[a] -> Int
    と表記し、lengthは多相関数である、と言える。
** 3_8 多重定義型
    たとえば(+)は、Numクラスのインスタンスの型aに対し有効である。
    Numクラスのインスタンスとは、Numクラスの制約を満たすよう定義した型(Int,Floatなど)である。
    このとき、
:    (+):: Num a => a -> a -> a
    と表記する。
    このように一つ以上のクラス制約を持つ型を、多重定義型と呼ぶ。
*** (=>) は 「クラス制約」、-> は「変換する」ことを意味する。
** 3_9 基本クラス
    Eq ー 同等クラス。
:       (==)::a -> a -> Bool
:       (/=)::a -> a -> Bool
    Ord ー 順序クラス。
:        <::a -> a -> Bool
:        >::a -> a -> Bool
:        <=::a -> a -> Bool
:        >=::a -> a -> Bool
:        min ::a -> a -> a
:        max ::a -> a -> a
    Show ー 表示可能クラス。文字列に変換可能なクラス。
    Read ー 読込可能クラス。文字列を値へ変換可能なクラス。(Showの対)
:         read "123"::Float -- => 123.0
    Num ー 数値クラス。
    Integral ー 整数クラス。
    Fractional ー 分数クラス。

* 第4章 関数定義
** 4_1 古きから新しきへ
** 4_2 条件式
** 4_2 ガード付きの等式
    以下の2つの式は同値
:        abs::Int->Int
:        abs n = if n >= 0 then n else -n

:        abs n | n >= 0  = 0
:              | otherwise = -n b

** 4_4 パターンマッチ
    パターンが並べられ、列挙された同じ型の候補の中から結果を選ぶ
    たとえば (&&) は以下のような定義
:        (&&) :: Bool -> Bool ->Bool
:        True && True = True
:        _ && _ = False
:    -- (「_」はワイルドカード)

    タブルパターン
        「同じ要素数を持ち、それぞれの要素が対応するパターンにすべて合致するタプル」に合致
        ex)
:            fst ::(a,b) -> a
:            fst (x,_)

    リストパターン
        「同じ要素数をもち、それぞれの要素が対応するパターンにすべて合致するリスト」に合致
        [1,2,3] == 1:[2,3] == 1:2:3:[]なので

    n+kパターン
:        pred :: Int -> Int
:        pred 0 = 0
:        pred (n + 1) = n
** 4_5 lambda(\)式=
    無名関数のこと。
    利用方法
        たとえば
:            twice x = x + x
:            twice 2
        を
:            (\x -> x + x) 2
        と名前を付けて利用することができる.

        複数の引数をとりたいときは
:            \ x y -> x + y

        カリー化された関数の形式的な意味づけ。以下の2つの式は同等
:            add x y = x + y
:            --
:            add = \x -> (\y -> x + y)
:            --引数にxを取り,ある関数を返す.その関数は,引数として数値yを取り(x+y)を返す.
        本質的に関数を返す関数を定義する場合、分かりやすい。
:            const :: a -> b -> a
:            const x _ = x 関数を返せる!!
            これでもわかるけど。。。
:            const :: a -> (b -> a)
:            const x = \_ -> x
            このほうが関数を返すっていうのがわかりやすい!!
        関数に名前を付けたくないとき。以下の2つの式は同等
:            odds ::Int -> [Int]
:            odds n = map f [0..n-1]
:                     where f x = x * 2 + 1
:
:            odds n = map (\x -> x * 2 + 1) [0..n-1]

** 4_6 セクション
    セクションとは、以下のような式のこと。(演算子はセクション)
:        (@) = \x -> (\y -> x @ y)
:        (x @) = \y -> x @ y
:        (@ y) = \x -> x @ y

* 第5章 リスト内包表記
** 5_1 生成器
    内包表記ー既存の集合から、新しい集合を生成する
    xを集合{1,2,3,4}とするとき、すべての要素に対してx^2となる集合を生成するには
:        [x^2|x<-[1..4]]
    と書く。(rubyなら、 [1,2,3,4].map{|x} x*x}みたいなもんか)

    「|」は「ーーのような」、「<-」は「ーーから取り出した」という意味。

    こんなんもできる
:        > [(x,y)|x<-[1,2,3],y<-[4,5]]
:        [(1,4),(1,5),(2,4),(2,5),(3,4),(3,5)]

*** lengthの定義
:        length ::[a]->Int
:        length xs = sum [1|_<-xs]
:        -- 「_<-xs」は1を要素分生成するためのカウンタ

** 5_2 ガード
    ガードは、前方の生成器で生成された値を、後方のガード(条件付けみたいなとこ)で間引く。
    ガードがTrueの場合、その値は残される。
    たとえば正の整数の約数をリストで返すメソッドは
:        factors :: Int -> [Int]
:        factors n = [x| x <- [1..n],mod n x == 0]

    以下のような動作をするfindValueメソッドを作るばあい。
:        > findValue 'b' [('a',1),('b',2),('b',3)]
:        [2,3]
    こんなかんじ。
:        findValue :: Eq a => a -> [(a,b)] -> [b]
:        findValue key list = [value|(key',value) <- list,key == key']

** 5_3 関数zip
:    > zip ['a','b','c'][1,2,3,4]
:    [('a',1),('b',2),('c',3)]
    リスト内包表記と一緒につかうと便利。

** 5_4 文字列の内包表記
:    「"abc"::String」は「['a','b','c']::[Char]」の略記。
:    > zip ['a','b','c'][1,2,3,4]
    は
:    > zip "abc" [1,2,3,4]
    と同値。

** 5_5 シーザー暗号

* 第6章 再帰関数

** 6_1 基本概念
    関数を関数自身をつかって定義すること
:        factorial 0 = 1 -- 基底部
:        factorial (n+1) = (n + 1) * factorial n --再帰部

    haskellのライブラリ関数のほとんどが再帰。

** 6_2 リストに対する再帰
    たとえばreverseを定義すると、以下のようになる。
:        reverse ::[a]->[a]
:        reverse [] = []
:        reverse (x:xs) = reverse xs ++ [x]

    ガードをつかうとこんなんもできる。
:        insert ::Ord a => a -> [a] -> [a]
:        insert x [] = [x]
:        insert x (y:ys) | x <= y  = x : y : ys
:                        | otherwise = y : insert x ys

** 6_3 複数の引数
    複数の引数を同時に変化させる場合、基底部が2つ必要になる。
:        > dropRecur 6 [1,2,3,4,5,6,7,8]
:        [7,8]
    を定義すると
:        dropRecur :: Int -> [a] -> [a]
:        dropRecur 0 xs = xs
:        dropRecur n [] = []
:        dropRecur n (_:xs) = dropRecur (n-1) xs

** 6_4 多重再帰
    関数が自分自身を複数参照すること。

** 6_5 相互再帰
    二つ以上の関数が、お互いを参照しあうこと。
:        evenRecur ::Int ->Bool
:        evenRecur 0 = True
:        evenRecur n = oddRecur (n-1)
:
:        oddRecur ::Int -> Bool
:        oddRecur 0 = False
:        oddRecur n = evenRecur (n-1)
    このときの動作は、evenRecurとoddRecurを繰りかえし、どちらの関数で0になるかにより返す値が変わる

** 6_6 再帰の秘訣
    6_3のdropRecurを例としてみていくと、、、

*** 1 型を定義する
:      dropRecur :: Int -> [a] -> [a]

*** 2 場合分けをする
:      dropRecur 0 [] =
:      dropRecur 0 (x:xs) =
:      dropRecur n [] =
:      dropRecur n (x:xs) =

*** 3 簡単な方を定義する
:      dropRecur 0 [] = []
:      dropRecur 0 (x:xs) = x:xs
:      dropRecur n [] = []
:      dropRecur n (x:xs) =

*** 4 複雑な方を定義する
:      dropRecur 0 [] = []
:      dropRecur 0 (x:xs) = x:xs
:      dropRecur n [] = []
:      dropRecur n (x:xs) = dropRecur (n-1) xs

*** 5 一般化し単純にする
      利用されていない変数を「_」に変更
      重複を消去すると、6_3のようになる

* 第7章 高階関数
** 7_1 基本概念
    引数として関数を取る関数
    たとえば関数を2回適用した結果を返す関数twiceは以下。
:        twice :: (a -> a) -> a -> a
:        twice f x = f $ f x
    * 返り値として関数を返すことはカリー化。

** 7_2 リスト処理
    標準ライブラリにあるリスト処理のための高階関数について
    特徴
        1 多くのものは任意の型のリストに適用可能。
        2 入れ子になったリストを処理するときは、mapの引数に関数を指定すればいい

*** map 引数として与えられた関数をリスト内の要素すべてに適用する。
:        > map (+1) [1,3,5,6]
:        [2,4,6,7]

*** filter リストの中から述語(真理値を返す関数)を満たす要素を取りだす。
:        > filter ( /= ' ') "haskell is fun"
:        "haskellisfun"

*** all 要素すべてが述語を満たすか
:        > all even [2,4,6]
:            True

*** any 要素のどれかが述語を満たすか
:        > any even [1,3,5]
:        False

*** takeWhile 述語を満たす連続した要素を取り出す
:        > takeWhile (<= 10) [4,5,12,6,9,11,23]
:        [4,5]

*** dropWhile 述語を満たす連続した要素を取り除く
:        > dropWhile (<= 10) [4,5,12,6,9,11,23]
:        [12,6,9,11,23]

** 7_3 畳込関数foldr
    関数sumを再帰をつかって定義すると以下のようになる
:        sum [] = 0
:        sum (x:xs) = x + sum xs
    これをfoldr(fold right)をつかうと、以下のように書ける。
:        sum = foldr (+) 0
    明示的に書くと、
:        sum xs = foldr (+) 0 xs

    foldrの定義は、
:        foldr :: (a -> b -> b) -> b -> [a] -> b
:        foldr f v [] = v
:        foldr f v (x:xs) = f x $ foldr f v xs
:        -- fは関数。vは、空リストだったときの値。

    しかし、単にcons演算子を関数fに置き換え、末尾の空リストを値vに置き換えると理解するほうがよい。なぜなら、foldrの関数名と関連づけやすいから(?)
:        sum [1,2,3] だと、
:        (1:(2:(3:[])))なので、
:        1+(2+(3+0)
    このように、右結合であるので「fold right(右から畳み込む)」という名前になっている。

** 7_3 畳込関数foldl
    左結合で定義するときは「foldl(fold left)を使う
    左結合の例
:        suml = sum' 0
:               where
:                 sum' v [] = v
:                 sum' v (x:xs) = sum' (v+x) xs
    これを実行すると
:        > suml [1,2,3]は((0 + 1) + 2) + 3

    つまり
:        f v [] = v
:        f v (x:xs) = f (v @ x) xs
    のような場合、foldl関数を使うことができる。

    foldlの定義は、
:        foldl :: (a -> b -> b) -> b -> [a] -> b
:        foldl f v [] = v
:        foldl f v (x:xs) = foldl f (f v x) xs
:        -- fは関数。vは、空リストだったときの値。

** 7_5 関数合成演算子
    高階演算子「.」は、二つの関数を合成した関数を返す。
:        (.) :: (b->c) -> (a->b) -> (a->c)
:        f.g = \x -> f (g x)
:        -- これは「(f.g) x = f (g x)」と定義してもよい。

    「.」をつかうことで、式を短くすることができる。それは、括弧を減らせ、引数を省略できるから。
    結合法則により結合順位は結果に影響を与えないので,f.(g.h) も,(f.g).hも等しい.結果、括弧を減らすことができる。

:        twice f x = f $ f x
　　は
:        twice f = f.f
    になる。


*** 関数の単位元について。
        単位元とは,ある集合の中の要素aに対し,演算子@を適用する場合
:            a@e == e@a == a
        となるようなeのこと.(+)の場合はeが0,(*)の場合はeが1となる.

****    関数の単位元は,恒等関数id.引数を変えることなく返す.
:            id :: a -> a
:            id = \x -> x
:            -- id x = xでも可

****    引数の関数リストに対し、要素である関数すべてを合成する関数composeは以下のように定義できる。
:            compose :: [a -> a] -> (a -> a)
:            compose = foldr (.) id

** 7_6 文字列の変換器

* 第8章 関数型パーサ
** 8.1 パーサ
    文字列を取り,文字列の文法構造を表現する曖昧さのない構文木を返すプログラム
    "2 * 3 + 4"という文字列は,数式のパーサにより以下のような構文木をつくる.
:        + ┬ 4
:          └ * ┬ 3
:               └ 2
        数値が葉,演算子が節の部分にある.
    ほとんどのプログラムはパーサを使う.入力の構造を明確にしておくことで,処理が簡単になる.
** 8.2 パーサの型
    パーサは文字列を扱うため,引数はString.またパースできなかった部分の文字列を返す部分と,失敗したことを示す部分をつけると,
:        type Parser a = String -> [(a,String)]
    となる.
** 8.3  基本的なパーサ
***  解析が必ず成功する、入力文字列を消費しないパーサを作る
:     return :: a -> Parser a
:     return v = \inp -> [(v,inp)]

***  解析が必ず失敗するパーサを作る
:     failure :: Parser a
:     failure = \inp -> []

***  item ::Parser Char
:     item = \inp -> case inp of
:                 [] -> []
:                 (x:xs) -> [(x,xs)]

** 8.4 連結
** 8.5 選択
    ふたつのパーサを組み合わせる方法を3つ。
*** 1.一方をパースしたあと,他方を適用

*** 2.連結演算子「>>=(そして)」を用いて,結果を処理する
:        p >>= f = \inp -> case parse p inp of
:                          [] -> []
:                          [(v,out)] -> parse (f v) out
        -- 一番目のパーサpを適用し,
        -- 失敗すれば,全体も失敗する
        -- 成功すれば,一番目のパーサの結果に,関数fを適用.二番目のパーサを生成
     これはhttp://0465.at.webry.info/201009/article_5.htmlなので
:        p1 >>= \v1 ->
:        p2 >>= \v2 ->
:        ...
:        pn >>= \vn ->
:        return (f v1 v2 ... vn)
:        -- v1は,パーサp1の結果.
      となる.


      このようなパーサは,生成器(<-)を用いて
:        do v1 <- p1
:           v2 <- p2
:           ...
:           vn <- pn
:           return (f v1 v2 ... vn)
      と書くこともでき,こちらの方が簡潔.

*** 3.パーサの選択演算子を定義
        1番目のパーサが失敗したら、2番目のパーサを適用する
:        (+++) :: Parser a -> Parser a -> Parser a
:        p +++ q = \inp -> case parse p inp of
:                           [] -> parse q inp
:                           [(v,out)] -> [(v,out)]

** 8.6 パーサの部品
    8.3 〜 8.5 までのコードを使うと,パーサの部品をたくさん作れる

** 8.7 空白の扱い
    実用的なパーサは,入力文字列中の「トークン」の前後に空白があることを許容する
:        space :: Parser ()
:        space = do many (sat isSpace)
:                   return ()

:        token :: Parser a -> Parser a
:        token p = do space
:                     v <- p
:                     space
:                     return v

** 8.8 数式
    数式の文法をつくっていく
    exprはexpression(式).termは項.factorは因数(積の要素).natは自然数.

:        expr ::= expr '+' expr | expr '*' expr | '(' expr ')' | nat
:        nat :: = '0' | '1' | '2' |...

    これだと,演算子や「()」の結合順位が表現できていないので
:        expr :: = expr '+' expr | term
:        term :: = factor '*' term | factor
:        factor ::= '(' expr ')' | nat
:        nat :: = '0' | '1' | '2' |...

    もっと簡潔

    以上をパーサに変換していく.
:        symbol :: String -> Parser String
:        symbol xs = token (string xs)

:        expr :: Parser Int
:        expr = do t <- term
:                  do symbol "+"
:                     e <- expr
:                     return (t + e)
:                   +++ return t

:        term :: Parser Int
:        term = do f <- factor
:                  do symbol "*"
:                     t <- term
:                     return (f * t)
:                   +++ return f

:        factor :: Parser Int
:        factor = do symbol "("
:                    e <- expr
:                    symbol ")"
:                    return e
:                  +++ natural

* 第9章 対話プログラム
** 9.1 対話
    対話プログラム ー ユーザから付加的な入力を取り,ユーザへ付加的な出力を生成する
      (対義語)バッチプログラム ー この章までで書いたhaskellのプログラムたち

    対話プログラムの場合,実行中に入出力をともなうので副作用を起こす.
    対話プログラムを純粋な関数(定数しかもたない状態)にモデル化することは可能か??

** 9.2 入出力の型
    haskellでは,対話プログラムを
    「引数に"ある状態の世界"を取り"別の状態の世界"を返す純粋な関数」とみなす.
    "別の状態の世界"とは,入出力によって起きた副作用を反映した結果.

    対話プログラムの型「IO」を,"世界の現在の状態"を表す型「World」で表現すると,
:        type IO = World -> World
    IOという型が、関数の役目を果たしているのがわかる。
    また、Worldから他のWorldになるために関数を通した結果を返すことを考えると
:        type IO a = World -> (a,World)
    となる.
    このとき「IO a」をアクションとよぶ.

    IO ()の場合, 結果に意味がないことを示すユニットである()を返すアクションとなる.

** 9.3 基本アクション
:    getChar
:    putChar
:    return
    の3つ.
    以下、8章とおなじ流れ。


* 第10章 型とクラスの定義
型宣言をする方法はtypeを使う方法と、dataを使う方法がある。
** 10.1 typeによる型宣言
     既存の型に別名をつける方法。

     たとえばStringの定義は、以下のように書ける。
:        type String = [Char]
     複数の型変数もつかえる。
:        type Assoc k v = [(k,v)]

     再帰的にはできない。

** 10.2 dataによる型宣言
     完全に新しい型をつくる方法。再帰もつくれる(次のチャプター)。

     たとえばBoolの定義は、以下のように書ける。
:        data Bool = True | False

     型のために新しく定義された値を、構成子と呼ぶ。構成子も大文字ではじまる。
     構成子が引数をとることもある。よって、構成子は関数。
:        data Shape = Circle Float | Rect Float Float
     型Shapeは、Circle r または Rect x yという形の値をもつという意味。
:        *Main> :t Rect
:        Rect :: Float -> Float -> Shape
:        -- 関数っぽいよね

     変数も利用できる。
:        data Maybe a = Nothing | Just a
        Q. Just aじゃなくて、aじゃだめなの?
        A. 構成子は大文字から始まるのでJustは必要
     おおむね型aの値となるけど、もしかしたらのときに失敗したらNothingを返す。

     newtypeは元の型とちがう型として認識される。

** 10.3 再帰型
     dataで型宣言すると、再帰的にできる。
:        data Nat = Zero | Succ Nat

     二分木の定義は
:        data Tree = Leaf Int | Node Tree Int Tree
:
:        t :: Tree
:        t = Node (Node (Leaf 1) 3 (Leaf 4)) 5 (Node (Leaf 6) 7 (Leaf 9))
     とあらわすことができる。

** 10.4 恒真式検査
     恒真式とは、常に真となる命題。
     真理値、変数、否定、論理積、論理包含(前件が真、後件が偽のときのみ偽となる)で表す言語を考える。
:        data Prop = Const Bool | Var Char | Not Prop | And Prop Prop | Imply Prop Prop

** 10.6 クラスとインスタンスの宣言
     新しいクラスはclassで宣言できる。
:        class Eq  a where
:          (==),(/=) :: a -> a -> Bool
:          x /= y = not (x == y)

     .インスタンスの自動導出
        新しく宣言した型は、いくつかの組み込みクラスのインスタンスにするのが適切。
        「deriving」をつかうと、型を自動的に Eq, Ord, Show, Readのインスタンスにできる。
        たとえば Bool型の定義は以下。

:            data Bool = False | True
:                        deriving (Eq, Ord, Show, Read)

     .モナド型
        モナドの概念は以下。8,9章で実装したように、return と >>= を実装して型変数をとる型m。
:            class Monad m where
:              return ::a -> m a
:              (>>=) :: m a -> (a -> m b) -> m b

*** インスタンスとは「型クラスの制約を満たすよう定義した型」
     http://www.qualysite.co.jp/tech-blog/?p=3541
     だから、ある型aがクラスEqのインスタンスになるには、型aに同等と不等のメソッドを実装しなければならない。(いまは「/=」はデフォルトで定義されているから、同等だけでいい)
:        instance Eq Bool where
:          False == False = True
:          True == True = True
:          _ == _ = False


* do 文について
次の
4つの式はすべて同じ。
: (m >>= f) >>= g

: m >>= (\x -> f x >>= g)

: do  y <- do {x <- m; f x}
:     g y

: do x <- m
:    y <- f x
:    g y
